#!/bin/sh
#
# Copyright © Samuel Bizien Filippi, APTM <s DOT bizien-filippi AROBASE aptm DOT fr>
#
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3.
# See LICENSE file for details.
#
# dependencies :
# openssl
# curl
# jq

SHORTNAME="CT_LOGS"
VERSION="0.2.0"

### Exit functions
# Argument : message printed on output
unknown() {
	printf 'UNKNOWN %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	if [ -n "$DEBUG" ]; then
		cat "${LOG}"
	fi
	exit 3
}

critical() {
	printf 'CRITICAL %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	if [ -n "$DEBUG" ]; then
		cat "${LOG}"
	fi
	exit 2
}

ok() {
	printf 'OK %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	if [ -n "$DEBUG" ]; then
		cat "${LOG}"
	fi
	exit 0
}

usage() {
	echo
	echo "Usage: check_ct_logs -H domain -d certificate_directory [-a API_KEY -g -A \"1.2.3.4/example.com test.example.com\" -i -D -h]"
	echo
	echo "This script compares known certificates (stored locally) and registered certificates"
	echo "logged in public Certificate Transparency logs. It uses certspotter API, from"
	echo "https://certspotter.com"
	echo
	echo "Arguments:"
	echo "	-H, --host			domain name to check"
	echo "	-d, --certificate-directory	where to find known certificates (PEM encoded)"
	echo
	echo "Options:"
	echo "	-h, --help			print this information and exits"
	echo "	-a, --api-key			CertSpotter API key. Needed if you do"
	echo "					checks on a regular basis. Get one on :"
	echo "					https://sslmate.com/signup?for=certspotter_api"
	echo "	-c, --certspotter		Certspotter API URL. Defaults to"
	echo "					https://api.certspotter.com/v1/issuances"
	echo "					But you can change to your instance if you run"
	echo "					certspotter locally"
	echo "					(see https://github.com/SSLMate/certspotter )"
	echo "	-i, --include-subdomains	if set, the include subdomains option is set"
	echo "					this will search for the hostname and all"
	echo "					subdomains"
	echo "	-g, --get-from-host		if set, tries to contact host on port 443 to"
	echo "					retrieve certificate from there if there is a"
	echo "					registered certificate not known locally."
	echo "	-A, --addresses			IP or DNS addresses to contact to retrieve"
	echo "					certificate when '-g' is set. If not set, use"
	echo "					argument from -H. For each address, server name"
	echo "					can be specified after '/' : IP/server_name."
	echo "	-D, --debug			print debug information"
	echo
	echo "Examples:"
	echo " check_ct_logs -H test.example.com -d ."
	echo " check_ct_logs -H example.com -d . -i -g -A \"example.com 10.0.0.5/dev.example.com 10.0.0.8/dev.example.com\""
	echo
	echo "check_ct_logs version ${VERSION}"
	exit 3
}

# Processing options
DEBUG=""
HOST=""
CERTDIR=""
APIKEY=""
CERTSPOTTER_URL="https://certspotter.com/api/v1/issuances"
FROMHOST=""
INCLUDESUB="false"
ADDRESSES=""
while true; do
	case "$1" in
		-H|--host)
			HOST="$2"
			shift 2
			;;
		-d|--certificate-directory)
			CERTDIR="$2"
			shift 2
			;;
		-a|--api-key)
			CURLOPT="--user $2:"
			shift 2
			;;
		-g|--get-from-host)
			FROMHOST="true"
			shift
			;;
		-A|--addresses)
			ADDRESSES="$2"
			shift 2
			;;
		-i|--include-subdomains)
			INCLUDESUB="true"
			shift
			;;
		-h|--help)
			usage
			;;
		-D|--debug)
			DEBUG=1
			shift
			;;
		*)
			if [ -n "$1" ] ; then
				unknown "invalid option: $1"
			fi
			break
			;;
	esac
done

if [ -z "${HOST}" ] || [ -z "${CERTDIR}" ]; then
	usage
fi

if [ -z "${ADDRESSES}" ]; then
	ADDRESSES="${HOST}"
fi

# Setting up work directory
TMPDIR=`mktemp -d /tmp/ct_logs_${HOST}.XXXXX`
trap "rm -Rf ${TMPDIR}" EXIT

LOG="${TMPDIR}/debug"
echo "***** Debug log *****" > "${LOG}"

# doing curl "${CERTSPOTTER_URL}?$1" > "$2"
# with error checks. Exit scripts with "unknown" if it fails.
certspotter_request() {
	URL="${CERTSPOTTER_URL}?${1}"
	echo "[DBG] curl ${CURLOPT} --silent \"${URL}\" > \"${2}\"" >> "${LOG}"
	curl ${CURLOPT} --silent "${URL}" > "${2}"
	if [ $? -ne 0 ]; then
		unknown "Unable to download information from ${URL}"
	fi
	MESSAGE=$(jq --raw-output ".message" "${2}" 2>/dev/null)
	if [ -n "${MESSAGE}" ]; then
		unknown "Error with certspotter API : ${MESSAGE}"
	fi
}

# Retrieves certs from certspotter, adds them to registered_certs.json if it exists
# and extracts the sha256 fingerprints to registered_certs
get_registered_fingerprints() {
	LASTID=0
	JSONFILE="${TMPDIR}/registered_certs.json"
	NEWCERTSFILE="${TMPDIR}/new_certs.json"
	echo "null" > "${JSONFILE}"
	certspotter_request "domain=${HOST}&after=${LASTID}&include_subdomains=${INCLUDESUB}" "${NEWCERTSFILE}"
	while [ -s "${NEWCERTSFILE}" ] && [ 0 -lt $(jq length "${NEWCERTSFILE}") ]; do
		echo "[DBG] Merging registered_certs.json and new_certs.json" >> "${LOG}"
		if jq --slurp add "${JSONFILE}" "${NEWCERTSFILE}" > "${TMPDIR}/tmp.json"; then
			mv "${TMPDIR}/tmp.json" "${JSONFILE}"
			LASTID=$(jq --raw-output ".[-1].id" "${JSONFILE}")
		else
			echo "[DBG] Fail to merge both files" >> "${LOG}"
			rm "${TMPDIR}/tmp.json"
			break
		fi
		certspotter_request "domain=${HOST}&after=${LASTID}&include_subdomains=${INCLUDESUB}" "${NEWCERTSFILE}"
	done
	rm "${NEWCERTSFILE}"
	jq --raw-output '.[].pubkey_sha256' "${JSONFILE}" > "${TMPDIR}/registered_certs"
}

# Computes the sha256 fingerprint of certificates in $CERTDIR
get_known_fingerprints() {
	echo -n "" > "${TMPDIR}/known_certs"
	for CERT in "${CERTDIR}"/*; do
        [ -f "${CERT}" ] || continue
		echo -n "[DBG] openssl x509 -in \"${CERT}\" -noout -pubkey 2>/dev/null | openssl pkey -pubin -pubout -outform DER | openssl dgst -sha256 -r | cut --delimiter ' ' --fields 1 : " >> "${LOG}"

		FINGERPRINT=$(openssl x509 -in "${CERT}" -noout -pubkey 2>/dev/null | openssl pkey -pubin -pubout -outform DER | openssl dgst -sha256 -r | cut --delimiter ' ' --fields 1)
		if [ -n "${FINGERPRINT}" ]; then
			echo "${FINGERPRINT}" >> "${LOG}"
			echo "${FINGERPRINT}" >> "${TMPDIR}/known_certs"
		else
			echo "[FAIL]" >> "${LOG}"
		fi
	done
}

compare_fingerprints() {
	for FINGERPRINT in $(cat "${TMPDIR}/registered_certs"); do
		if ! grep --quiet --line-regexp --fixed-strings "${FINGERPRINT}" "${TMPDIR}/known_certs"; then
			UNKNOWN_CERTS="${FINGERPRINT} ${UNKNOWN_CERTS}"
		fi
	done;
}

# Tries to download a certificate from adddress given as parameter and to save it in $CERTDIR
fetch_cert() {
	ADDRESS=${1%/*}
	SNI=${1#*/}
	echo "[DBG] openssl s_client -host \"${ADDRESS}\" -port 443 -servername \"${SNI}\" -showcerts 2>/dev/null | openssl x509 > \"${TMPDIR}/downloaded_cert.pem\" 2> /dev/null" >> "${LOG}"
	echo | openssl s_client -host "${ADDRESS}" -port 443 -servername "${SNI}" -showcerts 2>/dev/null | openssl x509 > "${TMPDIR}/downloaded_cert.pem" 2> /dev/null
	if [ $? -ne 0 ]; then
		FAILED_ADDRESSES="${FAILED_ADDRESSES} ${1}"
		return
	fi

	FINGERPRINT=$(openssl x509 -in "${TMPDIR}/downloaded_cert.pem" -noout -fingerprint -sha256 2>/dev/null | tr --delete ':' | cut --delimiter = --fields 2)
	if [ -n "${FINGERPRINT}" ] && ! grep --quiet --line-regexp --fixed-strings "${FINGERPRINT}" "${TMPDIR}/known_certs"; then
		echo "${FINGERPRINT}" >> "${TMPDIR}/known_certs"
		echo "[DBG] cp \"${TMPDIR}/downloaded_cert.pem\" \"${CERTDIR}/${FINGERPRINT}.pem\"" >> "${LOG}"
		cp "${TMPDIR}/downloaded_cert.pem" "${CERTDIR}/${FINGERPRINT}.pem" 1>/dev/null 2>> "${LOG}" \
		  || echo "[DBG] failed to copy certificate" >> "${LOG}"
	fi
}

get_registered_fingerprints
echo "[DBG] registered certificates :" >> "${LOG}"
cat "${TMPDIR}/registered_certs" >> "${LOG}"

get_known_fingerprints
echo "[DBG] known certificates :" >> "${LOG}"
cat "${TMPDIR}/known_certs" >> "${LOG}"


UNKNOWN_CERTS=""
FAILED_ADDRESSES=""

compare_fingerprints

if [ -n "${UNKNOWN_CERTS}" ] && [ -n "${FROMHOST}" ] ; then
	for ADDRESS in $ADDRESSES; do
		fetch_cert "$ADDRESS"
	done
	UNKNOWN_CERTS=""
	get_known_fingerprints
	echo "[DBG] known certificates :" >> "${LOG}"
	cat "${TMPDIR}/known_certs" >> "${LOG}"
	compare_fingerprints
fi

if [ -n "${UNKNOWN_CERTS}" ]; then
	if [ -n "${FAILED_ADDRESSES}" ]; then
		critical "At least one certificate does not appear to come from a known location. Sha256 hash of unknown public key(s) : ${UNKNOWN_CERTS}. We were unable to fetch certificates from${FAILED_ADDRESSES}."
	else
		critical "At least one certificate does not appear to come from a known location. Sha256 hash of unknown public key(s) : ${UNKNOWN_CERTS}"
	fi
fi

ok "All certificates registered are known locally."
