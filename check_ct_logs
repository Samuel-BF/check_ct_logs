#!/bin/sh
#
# Copyright Â© Samuel Bizien Filippi, APTM <s DOT bizien-filippi AROBASE aptm DOT fr>
#
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3.
# See LICENSE file for details.
#
# dependencies :
# openssl
# curl
# jq

SHORTNAME="CT_LOGS"
VERSION="0.3.0"

### Exit functions
# Arguments : messages printed on output (first message is short, second
# message printed only when -v option is set)
unknown() {
	printf 'UNKNOWN %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	log_message "$2" 1
	exit 3
}

critical() {
	printf 'CRITICAL %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	log_message "$2" 1
	exit 2
}

ok() {
	printf 'OK %s %s: %s\n' "${SHORTNAME}" "${HOST}" "$1"
	log_message "$2" 1
	exit 0
}

usage() {
	echo
	echo "Usage: check_ct_logs -H domain -d certificate_directory [-a API_KEY -g -A \"1.2.3.4/example.com test.example.com\" -i -v -V -h]"
	echo
	echo "This script compares known certificates (stored locally) and registered certificates"
	echo "logged in public Certificate Transparency logs. It uses certspotter API, from"
	echo "https://certspotter.com"
	echo
	echo "Arguments:"
	echo "	-H, --hostname			domain name to check"
	echo "	-d, --certificate-directory	where to find known certificates (PEM encoded)"
	echo
	echo "Options:"
	echo "	-h, --help			print this information and exits"
	echo "	-a, --api-key			CertSpotter API key. Needed if you do"
	echo "					checks on a regular basis. Get one on :"
	echo "					https://sslmate.com/signup?for=certspotter_api"
	echo "	-c, --certspotter		Certspotter API URL. Defaults to"
	echo "					https://api.certspotter.com/v1/issuances"
	echo "					But you can change to your instance if you run"
	echo "					certspotter locally"
	echo "					(see https://github.com/SSLMate/certspotter )"
	echo "	-i, --include-subdomains	if set, the include subdomains option is set"
	echo "					this will search for the hostname and all"
	echo "					subdomains"
	echo "	-g, --get-from-host		if set, tries to contact host on port 443 to"
	echo "					retrieve certificate from there if there is a"
	echo "					registered certificate not known locally."
	echo "	-A, --addresses			IP or DNS addresses to contact to retrieve"
	echo "					certificate when '-g' is set. If not set, use"
	echo "					argument from -H. For each address, server name"
	echo "					can be specified after '/' : IP/server_name."
	echo "	-v, --verbose			verbose output (can be specified more than once)"
	echo "	-V, --version			print script version and exit"
	echo
	echo "Examples:"
	echo " check_ct_logs -H test.example.com -d ."
	echo " check_ct_logs -H example.com -d . -i -g -A \"example.com 10.0.0.5/dev.example.com 10.0.0.8/dev.example.com\""
	echo
	version
}

version () {
	echo "check_ct_logs version ${VERSION}"
	exit 3
}

log_message() {
	if [ "${VERBOSE}" -ge "${2:-1}" ]; then
		echo "${1}" >&2
	fi
}

log_file() {
	if [ "${VERBOSE}" -ge "${2:-1}" ]; then
		cat "${1}" >&2
	fi
}

# Processing options
VERBOSE=0
HOST=""
CERTDIR=""
APIKEY=""
CERTSPOTTER_URL="https://certspotter.com/api/v1/issuances"
FROMHOST=""
INCLUDESUB="false"
ADDRESSES=""
while true; do
	case "$1" in
		-H|--hostname)
			HOST="$2"
			shift 2
			;;
		-d|--certificate-directory)
			CERTDIR="$2"
			shift 2
			;;
		-a|--api-key)
			CURLOPT="--user $2:"
			shift 2
			;;
		-g|--get-from-host)
			FROMHOST="true"
			shift
			;;
		-A|--addresses)
			ADDRESSES="$2"
			shift 2
			;;
		-i|--include-subdomains)
			INCLUDESUB="true"
			shift
			;;
		-v|--verbose)
			VERBOSE=$((VERBOSE+1))
			shift
			;;
		-h|--help)
			usage
			;;
		-V|--version)
			version
			;;
		*)
			if [ -n "$1" ] ; then
				unknown "invalid option: $1"
			fi
			break
			;;
	esac
done

# Checking dependencies
command -v openssl > /dev/null || unknown "Missing dependency: openssl"
command -v curl > /dev/null || unknown "Missing dependency: curl"
command -v jq > /dev/null || unknown "Missing dependency: jq"

if [ -z "${HOST}" ] || [ -z "${CERTDIR}" ]; then
	usage
fi

if [ -z "${ADDRESSES}" ]; then
	ADDRESSES="${HOST}"
fi

# Setting up work directory
TMPDIR=`mktemp -d /tmp/ct_logs_${HOST}.XXXXX`
trap "rm -Rf ${TMPDIR}" EXIT

# doing curl "${CERTSPOTTER_URL}?$1" > "$2"
# with error checks. Exit script with "unknown" if it fails.
certspotter_request() {
	URL="${CERTSPOTTER_URL}?${1}"
	log_message "[DBG] curl ${CURLOPT} --silent \"${URL}\" > \"${2}\"" 2
	curl ${CURLOPT} --silent "${URL}" > "${2}"
	if [ $? -ne 0 ]; then
		unknown "Unable to download information from ${URL}"
	fi
	MESSAGE=$(jq --raw-output ".message" "${2}" 2>/dev/null)
	if [ -n "${MESSAGE}" ]; then
		unknown "Error with certspotter API" "${MESSAGE}\n"
	fi
}

# Retrieves certs from certspotter, adds them to registered_certs.json if it exists
# and extracts the sha256 fingerprints to registered_certs
get_registered_fingerprints() {
	LASTID=0
	JSONFILE="${TMPDIR}/registered_certs.json"
	NEWCERTSFILE="${TMPDIR}/new_certs.json"
	echo "[]" > "${JSONFILE}"
	certspotter_request "domain=${HOST}&after=${LASTID}&include_subdomains=${INCLUDESUB}&expand=dns_names" "${NEWCERTSFILE}"
	while [ -s "${NEWCERTSFILE}" ] && [ 0 -lt $(jq length "${NEWCERTSFILE}") ]; do
		log_message "[DBG] Merging registered_certs.json and new_certs.json" 2
		if jq --slurp add "${JSONFILE}" "${NEWCERTSFILE}" > "${TMPDIR}/tmp.json"; then
			mv "${TMPDIR}/tmp.json" "${JSONFILE}"
			LASTID=$(jq --raw-output ".[-1].id" "${JSONFILE}")
		else
			log_message "[DBG] Fail to merge both files" 2
			rm "${TMPDIR}/tmp.json"
			break
		fi
		certspotter_request "domain=${HOST}&after=${LASTID}&include_subdomains=${INCLUDESUB}&expand=dns_names" "${NEWCERTSFILE}"
	done
	rm "${NEWCERTSFILE}"
	jq --raw-output '.[] | (.pubkey_sha256 + " (valid from " + .not_before[0:10] + " to " + .not_after[0:10] + " for " + (.dns_names | join(", ")) + ")")' "${JSONFILE}" > "${TMPDIR}/registered_certs"
}

# Computes the sha256 fingerprint of certificates in $CERTDIR
get_known_fingerprints() {
	echo -n "" > "${TMPDIR}/known_certs"
	for CERT in "${CERTDIR}"/*; do
		if [ ! -f "${CERT}" ]; then
			log_message "[DBG] invalid file ${CERT}" 2
			continue
		fi

		log_message "[DBG] openssl x509 -in \"${CERT}\" -noout -pubkey 2>/dev/null" 2
		X509=$(openssl x509 -in "${CERT}" -noout -pubkey 2>/dev/null)
		if [ $? -ne 0 ]; then
			log_message "[DBG] invalid certificate ${CERT}"
			continue
		fi

		log_message "[DBG] echo "\${X509}" | openssl pkey -pubin -pubout -outform DER | openssl dgst -sha256 -r | cut --delimiter ' ' --fields 1" 2
		FINGERPRINT=$(echo "${X509}" | openssl pkey -pubin -pubout -outform DER 2>/dev/null | openssl dgst -sha256 -r 2>/dev/null | cut --delimiter ' ' --fields 1)
		if [ -n "${FINGERPRINT}" ]; then
			log_message " -> ${FINGERPRINT}" 2
			echo "${FINGERPRINT}" >> "${TMPDIR}/known_certs"
		else
			log_message " -> " 2
		fi
	done
	log_message "[DBG] known certificates :" 2
	log_file "${TMPDIR}/known_certs" 2
}

compare_fingerprints() {
	cat "${TMPDIR}/registered_certs" | while read CERTIFICATE; do
		if ! grep --quiet --line-regexp --fixed-strings "${CERTIFICATE%% *}" "${TMPDIR}/known_certs"; then
			echo "${CERTIFICATE}"
		fi
	done
}

# Tries to download a certificate from adddress given as parameter and to save it in $CERTDIR
fetch_cert() {
	ADDRESS=${1%/*}
	SNI=${1#*/}

	if [ ! -d "${CERTDIR}" ]; then
		log_message "[DBG] Creating ${CERTDIR}" 2
		mkdir -p "${CERTDIR}" 2> /dev/null
		if [ $? -ne 0 ]; then
			log_message "[DBG] failed to create ${CERTDIR}" 2
			FAILED_TO_COPY_CERTIFICATE="Error creating ${CERTDIR}\n"
			return
		fi
	fi

	log_message "[DBG] openssl s_client -host \"${ADDRESS}\" -port 443 -servername \"${SNI}\" -showcerts 2>/dev/null | openssl x509 > \"${TMPDIR}/downloaded_cert.pem\" 2> /dev/null" 2
	echo | openssl s_client -host "${ADDRESS}" -port 443 -servername "${SNI}" -showcerts 2>/dev/null | openssl x509 > "${TMPDIR}/downloaded_cert.pem" 2> /dev/null
	if [ $? -ne 0 ]; then
		FAILED_ADDRESSES="${FAILED_ADDRESSES} ${1}"
		return
	fi

	FINGERPRINT=$(openssl x509 -in "${TMPDIR}/downloaded_cert.pem" -noout -fingerprint -sha256 2>/dev/null | tr --delete ':' | cut --delimiter = --fields 2)
	if [ -n "${FINGERPRINT}" ] && ! grep --quiet --line-regexp --fixed-strings "${FINGERPRINT}" "${TMPDIR}/known_certs"; then
		echo "${FINGERPRINT}" >> "${TMPDIR}/known_certs"
		log_message "[DBG] cp \"${TMPDIR}/downloaded_cert.pem\" \"${CERTDIR}/${FINGERPRINT}.pem\"" 2
		cp "${TMPDIR}/downloaded_cert.pem" "${CERTDIR}/${FINGERPRINT}.pem" 1>/dev/null 2>&1
		if [ $? -ne 0 ]; then
			log_message "[DBG] failed to copy certificate" 2
			FAILED_TO_COPY_CERTIFICATE="Error copying certificate to ${CERTDIR}/${FINGERPRINT}.pem\n"
		fi
	fi
}

get_registered_fingerprints

get_known_fingerprints

UNKNOWN_CERTS=$(compare_fingerprints)
FAILED_ADDRESSES=""
FAILED_TO_COPY_CERTIFICATE=""

if [ -n "${UNKNOWN_CERTS}" ] && [ -n "${FROMHOST}" ] ; then
	for ADDRESS in $ADDRESSES; do
		fetch_cert "$ADDRESS"
	done
	UNKNOWN_CERTS=""
	get_known_fingerprints
	UNKNOWN_CERTS=$(compare_fingerprints)
fi

N_REGISTERED=$(cat "${TMPDIR}/registered_certs" | sort | uniq | wc -l)
N_UNKNOWN=$(echo "${UNKNOWN_CERTS}" | sed '/^$/d' | wc -l)
STATS="|registered=${N_REGISTERED} unknown=${N_UNKNOWN};1;1;0"
N_REGISTERED_S=""
[ "${N_REGISTERED}" -gt 1 ] && N_REGISTERED_S="s"
N_UNKNOWN_S=""
[ "${N_UNKNOWN}" -gt 1 ] && N_UNKNOWN_S="s"

if [ -n "${UNKNOWN_CERTS}" ]; then
	DETAILS=""
	if [ -n "${FAILED_ADDRESSES}" ]; then
		DETAILS="\nWe were unable to fetch certificates from${FAILED_ADDRESSES}."
	fi
	if [ -n "${FAILED_TO_COPY_CERTIFICATE}" ]; then
		DETAILS="${DETAILS}\n${FAILED_TO_COPY_CERTIFICATE}"
	fi
	critical "${N_UNKNOWN} unknown certificate${N_UNKNOWN_S} (out of ${N_REGISTERED} registered certificate${N_REGISTERED_S})${STATS}" "Sha256 hash of unknown public key(s) :\n${UNKNOWN_CERTS}${DETAILS}"
fi

ok "No unknown certificate (${N_REGISTERED} registered certificate${N_REGISTERED_S})${STATS}"
